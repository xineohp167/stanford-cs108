import static org.junit.Assert.*;import org.junit.Test;import java.util.*;/*  EmailsTest -- unit tests for the Emails class. */public class EmailsTest {		// Basic use	@Test	public void testUsersBasic() {		Emails emails = new Emails("foo bart@cs.edu xyz marge@ms.com baz");		assertEquals(Arrays.asList("bart", "marge"),   emails.getUsers()  );		// Note: Arrays.asList(...) is a handy way to make list literal.		// Also note that .equals() works for collections, so the above works.	}		@Test	public void testUsersBasic2() {		Emails emails = new Emails("foo bart99@cs.edu xyz s.com baz");		assertEquals(Arrays.asList("bart99"),   emails.getUsers()  );		// Note: Arrays.asList(...) is a handy way to make list literal.		// Also note that .equals() works for collections, so the above works.	}		// Weird chars -- push on what chars are allowed	@Test	public void testUsersChars() {		Emails emails = new Emails("fo f.ast@cs.edu bar&a.2.c@ms.com ");		assertEquals(Arrays.asList("f.ast", "a.2.c"), emails.getUsers());	}	// Hard cases -- push on unusual, edge cases	@Test	public void testUsersHard() {		Emails emails = new Emails("x y@cs 3@ @z@");		assertEquals(Arrays.asList("y", "3", "z"), emails.getUsers());				// No emails		emails = new Emails("no emails here!");		assertEquals(Collections.emptyList(), emails.getUsers());				// All @, all the time!		emails = new Emails("@@@");		assertEquals(Collections.emptyList(), emails.getUsers());				// Empty string		emails = new Emails("");		assertEquals(Collections.emptyList(), emails.getUsers());	}}